module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output spi_miso,        // AVR SPI MISO
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    output avr_rx,          // AVR RX (FPGA TX)
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      multi_seven_seg multi;
      counter ctr (#SIZE(3), #DIV(16));  //for led seg

    }
  }
  
  aluLogic alu;
  binToDec btd;
  seven_seg num3; //Indicate overflows
  seven_seg num2;
  seven_seg num1;
  seven_seg num0;
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    

    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    
    // connect the DIP switches to the LEDs    
    io_led[0][7:0] = io_dip[0][7:0];   
    io_led[1][7:0] = io_dip[1][7:0];
    
    // connect the DIP switches to the alu functions
    alu.b[7:0] = io_dip[0][7:0];
    alu.a[7:0] = io_dip[1][7:0];
    alu.alufn[5:0] = io_dip[2][5:0];
    
    // Displaying data
    io_led[2][7:0] = alu.aluOUT[7:0];
    btd.value = alu.aluOUT[7:0];
    //num2.char = btd.digits[2][2];
    //num1.char = btd.digits[2][1];
    //num0.char = btd.digits[2][0];
    
    multi.values = btd.digits;
   
    
    
    // Display overflow 
    num3.char = 30;
    if(alu.v == 1){
      num3.char = 20;
      }
    
    if(alu.overflow == 1){
      num3.char = 20;
      }
   
    case(ctr.value){
      3: 
        io_seg=~num3.segs;
        io_sel = ~4b1000;
        
      default:
        io_seg=~num0.segs;
        io_sel = ~4b1;                
      }
        
  }
}