/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [3-1:0] M_ctr_value;
  counter_2 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  
  wire [1-1:0] M_alu_overflow;
  wire [8-1:0] M_alu_aluOUT;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [8-1:0] M_alu_a;
  reg [8-1:0] M_alu_b;
  aluLogic_3 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .overflow(M_alu_overflow),
    .aluOUT(M_alu_aluOUT),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [16-1:0] M_btd_digits;
  reg [8-1:0] M_btd_value;
  binToDec_4 btd (
    .value(M_btd_value),
    .digits(M_btd_digits)
  );
  
  wire [7-1:0] M_num3_segs;
  reg [4-1:0] M_num3_char;
  seven_seg_5 num3 (
    .char(M_num3_char),
    .segs(M_num3_segs)
  );
  
  wire [7-1:0] M_num2_segs;
  reg [4-1:0] M_num2_char;
  seven_seg_5 num2 (
    .char(M_num2_char),
    .segs(M_num2_segs)
  );
  
  wire [7-1:0] M_num1_segs;
  reg [4-1:0] M_num1_char;
  seven_seg_5 num1 (
    .char(M_num1_char),
    .segs(M_num1_segs)
  );
  
  wire [7-1:0] M_num0_segs;
  reg [4-1:0] M_num0_char;
  seven_seg_5 num0 (
    .char(M_num0_char),
    .segs(M_num0_segs)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led[0+0+7-:8] = io_dip[0+0+7-:8];
    io_led[8+0+7-:8] = io_dip[8+0+7-:8];
    M_alu_b[0+7-:8] = io_dip[0+0+7-:8];
    M_alu_a[0+7-:8] = io_dip[8+0+7-:8];
    M_alu_alufn[0+5-:6] = io_dip[16+0+5-:6];
    io_led[16+0+7-:8] = M_alu_aluOUT[0+7-:8];
    M_btd_value = M_alu_aluOUT[0+7-:8];
    M_num2_char = M_btd_digits[8+2+0-:1];
    M_num1_char = M_btd_digits[8+1+0-:1];
    M_num0_char = M_btd_digits[8+0+0-:1];
    M_num3_char = 5'h1e;
    if (M_alu_v == 1'h1) begin
      M_num3_char = 5'h14;
    end
    if (M_alu_overflow == 1'h1) begin
      M_num3_char = 5'h14;
    end
    
    case (M_ctr_value)
      1'h0: begin
        io_seg = ~M_num0_segs;
        io_sel = 4'he;
      end
      1'h1: begin
        io_seg = ~M_num1_segs;
        io_sel = 4'hd;
      end
      2'h2: begin
        io_seg = ~M_num2_segs;
        io_sel = 4'hb;
      end
      2'h3: begin
        io_seg = ~M_num3_segs;
        io_sel = 4'h7;
      end
      default: begin
        io_seg = ~M_num0_segs;
        io_sel = 4'he;
      end
    endcase
  end
endmodule
